const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const pool = require("./config/db.js");
const cors = require("cors");
const app = express();
const port = 8081;
app.use(cors());
app.use(express.json());

app.listen(port, () => {
  console.log(`Listening on port ${port}`);
});

const dirname = path.resolve();

app.use(express.static(path.join(dirname, "/AdminFrontend/build")));

// app.get("/", (req, res) => {
//   res.send("Hello");
// });

app.post("/login", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "SELECT * FROM logincredentials WHERE `userName` = ? AND `password` = ?";
    conn.query(sql, [req.body.userName, req.body.password], (err, result) => {
      conn.release();
      if (err) throw err;
      if (result.length > 0) {
        return res.json("Success");
      } else {
        return res.json("Failure");
      }
    });
  });
});
let Enddate = "";
let leftDaysOriginal = 0;
const autoGeneratedData = (pT, sS) => {
  const temp = parseInt(pT.charAt(0));
  leftDaysOriginal = Math.floor(
    temp % 2 === 0 ? temp / 2 + temp * 30 : temp / 2 + 1 + temp * 30
  );
  let temp2 =
    sS.substring(0, 5) + (Number(sS.charAt(6)) + temp) + sS.substring(7);
  if (Number(sS.charAt(6)) + temp > 12) {
    temp2 =
      sS.substring(0, 3) +
      5 +
      sS.substring(4, 6) +
      (Number(sS.charAt(6)) + temp - 12) +
      sS.substring(7);
  }
  Enddate = temp2;
};
const getPastDays = (sS) => {
  const currDate = new Date();
  const SS = new Date(sS);
  const pastDays = Math.floor((currDate - SS) / (3600000 * 24));
  return pastDays;
};
let memeberId = 0;
app.post("/newClient", (req, res) => {
  autoGeneratedData(req.body.packageType, req.body.subscripSta);
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "INSERT INTO user(firstName, lastName, address, mobile, email, packageType, amount, transacDate, transacNum, subscipSta, subscripEnd, subscripHist, leftDays, memberType, batchTime,remarks) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    conn.query(
      sql,
      [
        req.body.fName,
        req.body.lName,
        req.body.address,
        req.body.mobile,
        req.body.email,
        req.body.packageType,
        req.body.amount,
        req.body.transacDate,
        req.body.transacNum,
        req.body.subscripSta,
        Enddate,
        req.body.subscripHist,
        leftDaysOriginal,
        req.body.memeberShipType,
        req.body.batchTime,
        req.body.remarks,
      ],
      (err, result) => {
        if (err) throw err;

        conn.release();
        console.log(result);
        memeberId = result.insertId;
        res.json("Success");
      }
    );
  });
});
app.post("/renewMemberShip", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "INSERT INTO history(memberShipID, packageType, start_date, end_date) VALUES(?,?,?,?)";
    conn.query(
      sql,
      [memeberId, req.body.packageType, req.body.subscripSta, Enddate],
      (err, result) => {
        conn.release();
        if (err) console.log(err);
        res.json("Success");
      }
    );
  });
});
app.post("/history/:id", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) console.log(err);
    const sql = "SELECT * FROM history WHERE `memberShipID` = ?";
    conn.query(sql, [req.params.id], (err, result) => {
      conn.release();
      if (err) console.log(err);
      return res.json(result);
    });
  });
});
app.get("/dashboard", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "SELECT * FROM user";
    conn.query(sql, (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});

app.delete("/delete/:id", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "DELETE FROM user WHERE ID = ?";
    conn.query(sql, [req.params.id], (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});
app.put("/renew/:id", (req, res) => {
  autoGeneratedData(req.body.packageType, req.body.subscripSta);
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "UPDATE user SET `amount`=?, `transacDate`=?, `transacNum`=?, `packageType`=?,`subscipSta`= ? , `subscripEnd`=?, `leftDays`=? WHERE ID = ?";
    conn.query(
      sql,
      [
        req.body.amountRecieved,
        req.body.transacDate,
        req.body.transacNum,
        req.body.packageType,
        req.body.subscripSta,
        Enddate,
        leftDaysOriginal,
        req.params.id,
      ],
      (err, result) => {
        conn.release();
        if (err) throw err;
        return res.json(result);
      }
    );
  });
});
app.get("/searchData/:searchedData", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "SELECT * FROM user WHERE `firstName`=?";
    conn.query(sql, [req.params.searchedData], (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});
app.post("/historyPost/:id", (req, res) => {
  autoGeneratedData(req.body.packageType, req.body.subscripSta);
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "INSERT INTO history(memberShipID,packageType,start_date,end_date) VALUES(?,?,?,?)";
    conn.query(
      sql,
      [req.params.id, req.body.packageType, req.body.subscripSta, Enddate],
      (err, result) => {
        conn.release();
        if (err) throw err;
        res.json(result);
      }
    );
  });
});

app.post("/newPackage", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "INSERT INTO packages(type,duration,price) VALUES(?,?,?)";
    conn.query(
      sql,
      [req.body.packageType, req.body.packageDuration, req.body.packagePrice],
      (err, result) => {
        conn.release();
        if (err) throw err;
        res.json(result);
      }
    );
  });
});

app.get("/packages", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "SELECT * FROM packages";
    conn.query(sql, [], (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});

app.delete("/deletePackage/:id", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "DELETE FROM packages WHERE ID = ?";
    conn.query(sql, [req.params.id], (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});
app.get("/getPackage", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql = "SELECT duration from packages";
    conn.query(sql, [], (err, result) => {
      conn.release();
      if (err) throw err;
      return res.json(result);
    });
  });
});
app.get("/upcomingRenewalUser", (req, res) => {
  pool.getConnection((err, conn) => {
    if (err) throw err;
    const sql =
      "SELECT id,firstName,packageType,subscipSta,leftDays FROM user WHERE `leftDays`<=7";
    conn.query(sql, [], (err, result) => {
      conn.release();
      console.log(result);
      if (err) console.log(err);
      return res.json(result);
    });
  });
});

// app.put("/updateRemainingDays",(req,res)=>{
//   pool.getConnection((err,conn)=>{
//     if(err) throw err;
//     const sql = "UPDATE user SET `leftDays` = `leftDays`-?";
//     conn.query(sql,[pastDays],)
//   })
// })

app.get("*", (req, res) => {
  res.sendFile(path.join(dirname, "AdminFrontend", "build", "index.html"));
});
